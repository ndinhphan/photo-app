scalar GraphQLDate

enum VisibilityType {
  Public
  Private
  Friend
}

type User{
  id: Int!
  username: String!
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  source: String!
  favorites: [Post!]
  posts:[Post!]
  description: String
  createdAt: GraphQLDate!
}

input UserInputs{
  username: String!
  firstname: String!
  lastname: String!
  email: String!
  description: String
}

input UserUpdateInputs{
  firstname: String
  lastname: String
  email: String
  source: String
  description: String
}

type Post{
  id: Int!
  userId: Int!
  source: String!
  favorite: [String]
  author: User!
  comments: [Comment!]
  visibility: VisibilityType!
  description: String
  createdAt: GraphQLDate!
}

input PostInputs {
  userId: Int!
  source: String!
  visibility: VisibilityType!
  description: String
}

input PostUpdateInputs {
  source: String
  visibility: VisibilityType
  description: String
}



type Comment{
  id: Int!
  content: String!
  author: User!
  post: Post!
  createdAt: GraphQLDate!
}

input CommentInputs {
  userId: Int!
  postId: Int!
  content: String!
}

input CommentUpdateInputs {
  content: String
}



##### Top level declarations

type Query{
  about: String!
  user(id: Int!): User!
  userList: [User]!

  post(id: Int!): Post!
  postList(userid: Int, visibility: VisibilityType): [Post]!

  comment(id: Int!): Comment!
  commentList(userid: Int, postid:Int): [Comment]!

}

type Mutation{
  setAboutMessage(message: String!): String
  userCreate(user: UserInputs): User!
  userUpdate(id: Int!, changes: UserUpdateInputs!): User!
  userDelete(id: Int!): Boolean!
  
  postCreate(post: PostInputs): Post!
  postUpdate(id: Int!, changes: PostUpdateInputs!): Post!
  postDelete(id: Int!): Boolean!

  commentCreate(comment: CommentInputs): Comment!
  commentUpdate(id: Int!, changes: CommentUpdateInputs!): Comment!
  commentDelete(id: Int!): Boolean!  
}
